generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  albums        Album[]
  songs        Song[]
  playlists     Playlist[]
  userSongs     UserSong[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Album {
  id          String   @id @default(uuid())
  title       String
  artistId    String
  image       String?
  artist      User     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  songs       Song[]
  releaseDate DateTime
}

model Song {
  id        String          @id @default(uuid())
  title     String
  duration  Int // Duration in seconds
  albumId   String?
  album     Album?          @relation(fields: [albumId], references: [id], onDelete: SetNull)
  artistId  String
  artist    User            @relation(fields: [artistId], references: [id], onDelete: Cascade)
  url       String?
  streams   Int             @default(0)
  playlists PlaylistSong[]
  userSongs UserSong[]
}

model Playlist {
  id        String          @id @default(uuid())
  name      String
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs     PlaylistSong[]
  createdAt DateTime        @default(now())
}

model PlaylistSong {
  playlistId String
  songId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song    @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([playlistId, songId])
}

model UserSong {
  userId String
  songId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song   Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([userId, songId])
}
